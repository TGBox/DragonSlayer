package depr.newVersion.meta;

import java.util.concurrent.ThreadLocalRandom;
import depr.newVersion.classes.Character;
import depr.newVersion.classes.Enemy;
import depr.newVersion.classes.Field;
import depr.newVersion.classes.Map;
import depr.newVersion.classes.NPC;
import depr.newVersion.meta.GameConstants.Difficulty;
import depr.newVersion.meta.GameConstants.Gender;
import depr.newVersion.newCreators.MapCreator;
import depr.newVersion.oldCreators.WeaponCreator;

/**
 * Created by
 * Daniel Roesch
 * as "Nils Darmstrong".
 * -----------------
 * For "DragonSlayerDANI",
 * on 10.05.2017, 19:38.
 */
public class Game{

  private static final int START_MAP_ID = 1;
  private static final boolean START_GAME_WON = false;
  private static final boolean START_IN_FIGHT = false;
  private static final int MIN_FIELD_WIDTH = 3;
  private static final int MAX_FIELD_WIDTH = 7;
  private static final int MIN_FIELD_HEIGHT = 4;
  private static final int MAX_FIELD_HEIGHT = 7;

  private Character player;
  private Map map;
  private Difficulty difficulty;
  private int currentMapID;
  private boolean gameWon;
  private boolean inFight;

  /**
   * constructor method to create a new game object.
   * @param playerName String player name.
   * @param gender Gender of the player.
   * @param diff Difficulty.
   */
  public Game(String playerName, Gender gender, Difficulty diff){
    this.player = new Character(playerName, gender, diff, WeaponCreator.createStartingWeapon());
    this.difficulty = diff;
    this.currentMapID = START_MAP_ID;
    this.gameWon = START_GAME_WON;
    this.inFight = START_IN_FIGHT;
    this.map = MapCreator.createNewMap(randInt(MIN_FIELD_WIDTH, MAX_FIELD_WIDTH),
        randInt(MIN_FIELD_HEIGHT, MAX_FIELD_HEIGHT), diff, player.getLevel(),
        this.currentMapID, randBool());
    player.setPos(map.getStart());
  }

  /**
   * method to advance to the next map.
   */
  public void advanceToNextMap(){
    this.currentMapID += 1;
    this.map = MapCreator.createNewMap(randInt(MIN_FIELD_WIDTH, MAX_FIELD_WIDTH),
        randInt(MIN_FIELD_HEIGHT, MAX_FIELD_HEIGHT), this.difficulty, player.getLevel(),
        this.currentMapID, randBool());
    player.setPos(map.getStart());
  }

  // TODO check on prompt messages! you wanted to create a method that returns the prompts to get the user input, but you ended up with a complete fight handling method! both could go well, but check yourself, before you wreck yourself!

  /**
   * method to create the current output prompt for the user.
   * CLUSTER FUCK! think of another way to handle all this stuff!
   * if the player is on a field that contains an enemy, the boolean inFight is set to true
   * and the prompt will be generated by the createFightPrompt method.
   * @return the String prompt that can be used to get the next user input.
   */
  public String createCurrentPrompt(){
    String prompt;
    if(inFight){                      // fight is already in place.
      return createFightPrompt();
    } else if(current().hasEnemy()){  // fight starting.
      inFight = true;
      return createFightPrompt();
    } else if(current().isPortal()){  // portals to other map.
      prompt = "You've encountered a";
      if(current().vocal){
        prompt += "n ";
      } else {
        prompt += " ";
      }
      prompt += current().getName() + " which leads into a dark cave.\n";
      prompt += "What do you want to do? Type \"enter\" or \"e\" to enter.";
      return prompt;
    } else if(current().hasNPC()){    // npc interaction.
      NPC npc = current().getNpc();
      if(!npc.wasVisited() && npc.hasQuest() && !npc.isQuestCompleted()){
        // if first visit, has quest and quest not completed yet.
        int index = this.player.getQuestItemIndex(npc.getQuestID());
        if(index != -1) {  // if quest item directly in bag.
          this.player.deleteItem(index);
          prompt = npc.getName() + ": \"" + npc.getQuestCompleted() + "\"\n";
          prompt += "The npc hands you a";
          if (npc.getReward().vocal) {
            prompt += "n ";
          } else {
            prompt += " ";
          }
          prompt += npc.getReward().getName() + ".\n";
          player.addItem(npc.getReward());
          npc.setIsQuestCompleted(true);
          prompt += "What do you want to do?\nType \"help\" or \"h\" to get to the help screen.\n";
          return prompt;
        } else {            // if quest item not directly in bag.
          npc.setWasVisited(true);
          prompt = "You've encountered a";
          if(npc.vocal){
            prompt += "n ";
          } else {
            prompt += " ";
          }
          prompt += npc.getName() + ".\n";
          prompt += npc.getName() + ": \"" + npc.getMeetingPhrase() + "\"\n";
          prompt += "What do you want to do?\nType \"help\" or \"h\" to get to the help screen.\n";
          prompt += "Type \"attack\" or \"a\" to attack.";
          return prompt;
        }
      } else if(npc.wasVisited() && npc.hasQuest() && !npc.isQuestCompleted()){
        // if following visit and has quest and quest not completed yet.
        int index = this.player.getQuestItemIndex(npc.getQuestID());
        if(index != -1){  // if quest completed.
          this.player.deleteItem(index);
          prompt = npc.getName() + ": \"" + npc.getQuestCompleted() + "\"\n";
          prompt += "The npc hands you a";
          if(npc.getReward().vocal){
            prompt += "n ";
          } else {
            prompt += " ";
          }
          prompt += npc.getReward().getName() + ".\n";
          player.addItem(npc.getReward());
          npc.setIsQuestCompleted(true);
          prompt += "What do you want to do?\nType \"help\" or \"h\" to get to the help screen.\n";
          return prompt;
        } else {         // if quest not completed.
          prompt = npc.getName() + ": \"" + npc.getQuestNotCompleted() + "\"\n";
          prompt += "What do you want to do?\nType \"help\" or \"h\" to get to the help screen.\n";
          return prompt;
        }
      } else if(!npc.hasQuest() && !npc.wasVisited()){  // if no quest and not visited yet.
        prompt = npc.getName() + ": \"" + npc.getMeetingPhrase() + "\"\n";
        prompt += "What do you want to do?\nType \"help\" or \"h\" to get to the help screen.\n";
        return prompt;
      } else if(!npc.hasQuest() && npc.wasVisited()){   // if no quest, but already visited.
        prompt = npc.getName() + ": \"" + npc.getQuestCompleted() + "\"\n";
        prompt += "What do you want to do?\nType \"help\" or \"h\" to get to the help screen.\n";
        return prompt;
      }
    }
    // regular fields. TODO implement fields with crates and such.
    prompt = "You are standing on a";
    if(current().vocal){
      prompt += "n ";
    } else {
      prompt += " ";
    }
    prompt += current().getName();
    prompt += ". What do you want to do?\nType \"help\" or \"h\" to get to the help screen.";
    return prompt;
  }

  /**
   * method to create the fight prompt.
   * will be used to get the user input during fights.
   * @return String fight prompt.
   */
  private String createFightPrompt() {
    String prompt;
    if(current().hasNPC()){     // npc fights.
      NPC npc = current().getNpc();
      prompt = "You stand on a";
      if(current().vocal){
        prompt += "n ";
      } else {
        prompt += " ";
      }
      prompt += " and decided to attack the " + npc.getName() + ".\n";
      if(player.hits()){  // first strike hits.
        prompt += "The attack with your " + player.getWeapon().getName() +
            " hits and inflicts " + player.getWeapon().getAttack() +
            " damage points on the " + npc.getName() + ".\n";
        if(!npc.damageAndCheckIfAlive(player.getWeapon().getAttack())){ // if npc dies.
          prompt += "The npc dies.";
          if(randBool()){   // npc drops it's weapon onto the field.
            current().setItem(npc.getWeapon());
          } else {          // npc drops it's reward onto the field
            current().setItem(npc.getReward());
          }
          current().setNpc(null);
          inFight = false;
        } else {      // if npc survives.
          // npc attacks.
          if(npc.hits()){   // npc hits.
            prompt += "\nThe npc hits with it's " + npc.getWeapon().getName() + " and deals " +
                npc.getWeapon().getAttack() + " damage points to your health.\n";
            if(player.damageAndCheckIfAlive(npc.getWeapon().getAttack())){  // if player survives.
              prompt += "You have " + player.getHealth() + " health points left.\n";
              prompt += "What do you want to do?\n";
              prompt += "1: Fight the npc with your " + player.getWeapon().getName() + "\n";
              prompt += "2: Try to escape the npc\n";
              prompt += "3: Use item from bag";
              return prompt;
            } else {        // player dies.
              // TODO better implement death.
              prompt += "You died!";
              inFight = false;
              return prompt;
            }
          } else {          // npc misses.
            prompt += "\nThe " + npc.getName() + " misses.\n";
            prompt += "What do you want to do?\n";
            prompt += "1: Fight the npc with your " + player.getWeapon().getName() + "\n";
            prompt += "2: Try to escape the npc\n";
            prompt += "3: Use item from bag";
            return prompt;
          }
        }
      } else {            // first strike misses.
        return null;
      }
    } else {                    // enemy fights.
      Enemy enemy = current().getEnemy();
      if(enemy.isBoss()){       // if boss fight.
        prompt = "You stand on a";
        if(current().vocal){
          prompt += "n ";
        } else {
          prompt += " ";
        }
        prompt += " in front of the almighty dragon " + enemy.getName() + "!\n";
        prompt += enemy.getName() + " has " + enemy.getHealth() + " ";
        prompt += " health points left.\nWhat do you want to do?\n";
        prompt += "1: Fight the enemy with your " + player.getWeapon().getName() + "\n";
        prompt += "2: Try to escape the enemy\n";
        prompt += "3: Use item from bag";
        return prompt;
      } else {                  // if regular enemy.
        prompt = "You are facing a";
        if(current().vocal){
          prompt += "n ";
        } else {
          prompt += " ";
        }
        prompt += enemy.getName() + ".\nThe enemy carries ";
        if(enemy.getWeapon().vocal){
          prompt += "n ";
        } else {
          prompt += " ";
        }
        prompt += enemy.getWeapon().getName() + " and has " + enemy.getHealth();
        prompt += " health points left.\nWhat do you want to do?\n";
        prompt += "1: Fight the enemy with your " + player.getWeapon().getName() + "\n";
        prompt += "2: Try to escape the enemy\n";
        prompt += "3: Use item from bag";
        return prompt;
      }
    }
    return null;
  }

  /**
   * method to get quick access to the current field.
   * @return the current Field.
   */
  private Field current(){
    return this.map.getField(this.player.getPos());
  }

  /**
   * method to create a random integer within given bounds.
   * the bounds are inclusive, so the random number can be the bound itself.
   * this method is the preferred standard after java 1.7.
   * @param min int minimum value.
   * @param max int maximum value.
   * @return the randomly generated int.
   */
  private static int randInt(int min, int max){
      return ThreadLocalRandom.current().nextInt(min, max + 1);
  }

  /**
   * method to use as a shortcut to create a new random boolean.
   * uses ThreadLocalRandom to create the new boolean.
   * @return the randomly created boolean.
   */
  private static boolean randBool(){
    return ThreadLocalRandom.current().nextBoolean();
  }

  // Getter and setter methods.
  public Character getPlayer() {
    return player;
  }
  public Map getMap() {
    return map;
  }
  public int getCurrentMapID() {
    return currentMapID;
  }
  public boolean isGameWon() {
    return gameWon;
  }
  public boolean isInFight() {
    return inFight;
  }
  public void setPlayer(Character player) {
    this.player = player;
  }
  public void setMap(Map map) {
    this.map = map;
  }
  public void setCurrentMapID(int currentMapID) {
    this.currentMapID = currentMapID;
  }
  public void setGameWon(boolean gameWon) {
    this.gameWon = gameWon;
  }
  public void setInFight(boolean inFight) {
    this.inFight = inFight;
  }
}
